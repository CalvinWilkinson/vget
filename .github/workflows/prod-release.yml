name: ðŸš€Production Release


defaults:
  run:
    shell: pwsh


on:
  workflow_dispatch:


jobs:
  production_release:
    name: Production Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # TODO: Replace this step to pull version using version miner itself once preview.3 has been released
    - name: Get Version
      id: get-version
      run: |
        $projectName = "VersionMiner";
        $projFilePath = "${{ github.workspace }}/$projectName/$projectName.csproj";

        if (Test-Path -Path $projFilePath)
        {
          $xmlContent = [xml](Get-Content -Path $projFilePath -Raw);
          $version = $xmlContent.Project.PropertyGroup.Version;

          if ($null -eq $version)
          {
              Write-Host "::error::The '<Version/>' tag does not exist in the project file.";
              exit 1; # Fail Workflow
          }

          "version=$version" >> $env:GITHUB_OUTPUT;
        }
        else
        {
            Write-Host "::error::The project file '$projFilePath' could not be found.";
            exit 1; #Fail Workflow
        }

    - name: Validate Release Notes Path
      id: release-notes
      run: |
        $version = "${{ steps.get-version.outputs.version }}";

        $releaseNotesDirPath = "${{ github.workspace }}/Documentation/ReleaseNotes/ProductionReleases";
        $releaseNotesFilePath = "$releaseNotesDirPath/Release-Notes-v$version.md";

        if (Test-Path -Path $releaseNotesFilePath)
        {
          "file-path=$releaseNotesFilePath" >> $env:GITHUB_OUTPUT
        }
        else
        {
            Write-Host "::error::The release notes '$releaseNotesFilePath' do not exist.";
            Write-Host "::error::Create the release notes and run the release again.";

            exit 1; #Fail Workflow
        }

    - name: Perform Production Release
      uses: softprops/action-gh-release@v1
      with:
        name: "ðŸš€Production Release - ${{ steps.get-version.outputs.version }}"
        tag_name: "v${{ steps.get-version.outputs.version }}"
        body_path: "${{ steps.release-notes.outputs.file-path }}"
        files: "${{ steps.release-notes.outputs.file-path }}"
        prerelease: false


  publish-code-coverage:
    runs-on: ubuntu-latest
    name: Publish Code Coverage Results
    steps:
    - uses: actions/checkout@v3

    # TODO: Add step to pull version using version miner itself once preview.3 has been released for the VersionMiner action
    # Use the version in the publish code coverage results step below as part of the name

    - name: Execute Unit Tests
      run: dotnet test "${{ github.workspace }}/Testing/VersionMinerTests/VersionMinerTests.csproj" -c Release --collect:"XPlat Code Coverage"

    - uses: codecov/codecov-action@v3
      name: Publish Code Coverage Results
      with:
        directory: "${{ github.workspace }}/Testing/VersionMinerTests/TestResults/"
        name: "Production Release"
        fail_ci_if_error: true
        verbose: true
